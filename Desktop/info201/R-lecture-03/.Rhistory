return(count_y)
}else if (count_y < count_x) {
return(count_x)
}else if (count_y == count_x & count_y != 0 & count_x != 0) {
return("The strings have the same number of Zs")
}else{
return("Neither string contains the letter z.")
}
}
# Create a variable `more_zs` by passing two strings of your choice to your
# `has_more_zs` function
more_zs <- has_more_zs("dfzsld", "AZSDsdz")
has_more_zs <- function(x, y) {
count_x <- str_count(str_to_lower(x), "z")
count_y <- str_count(str_to_lower(y), "z")
if (count_x < count_y) {
return(count_y)
}else if (count_y < count_x) {
return(count_x)
}else if (count_y == count_x & count_y != 0 & count_x != 0) {
return("The strings have the same number of Zs")
}else{
return("Neither string contains the letter z.")
}
}
# Create a variable `more_zs` by passing two strings of your choice to your
# `has_more_zs` function
more_zs <- has_more_zs("zZZZz", "ZZZZZ")
has_more_zs <- function(x, y) {
count_x <- str_count(str_to_lower(x), "z")
count_y <- str_count(str_to_lower(y), "z")
if (count_x < count_y) {
return(count_y)
}else if (count_y < count_x) {
return(count_x)
}else if (count_y == count_x & count_y != 0 & count_x != 0) {
return("The strings have the same number of Zs")
}else{
return("Neither string contains the letter z.")
}
}
# Create a variable `more_zs` by passing two strings of your choice to your
# `has_more_zs` function
more_zs <- has_more_zs("ASDF", "DFSF")
more_zs <- has_more_zs("ASDF", "ASDF")
more_zs <- has_more_zs("ASDFZ", "ASDF")
remove_digits(c("INFO 201", "CSE 142"))
remove_digits <- fucntion(c(x)) {
str <- c(x)
gsub("[1,9]","",str)
}
# Demonstrate that your approach is successful by passing a vector of courses
# to your function. For example, remove_digits(c("INFO 201", "CSE 142"))
remove_digits(c("INFO 201", "CSE 142"))
remove_digits <- fucntion(c(x)) {
str <- c(x)
remove <- gsub("[1,9]","",str)
}
# Demonstrate that your approach is successful by passing a vector of courses
# to your function. For example, remove_digits(c("INFO 201", "CSE 142"))
remove_digits(c("INFO 201", "CSE 142"))
remove_digits <- fucntion(c(x)) {
str <- c(x)
remove <- gsub("[1,9]","",str)
remove
}
# Demonstrate that your approach is successful by passing a vector of courses
# to your function. For example, remove_digits(c("INFO 201", "CSE 142"))
remove_digits(c("INFO 201", "CSE 142"))
remove_digits <- fucntion(c(x)) {
str <- c(x)
remove <- gsub(pattern = "\\d","",str)
remove
}
# Demonstrate that your approach is successful by passing a vector of courses
# to your function. For example, remove_digits(c("INFO 201", "CSE 142"))
remove_digits(c("INFO 201", "CSE 142"))
remove_digits <- fucntion(c(x)) {
str <- c(x)
remove <- gsub(pattern = "\\d","",str)
remove
}
# Demonstrate that your approach is successful by passing a vector of courses
# to your function. For example, remove_digits(c("INFO 201", "CSE 142"))
remove_digits(c("INFO 201", "CSE 142"))
remove_digits <- function(c(x)) {
str <- c(x)
remove <- gsub(pattern = "\\d","",str)
remove
}
# Demonstrate that your approach is successful by passing a vector of courses
# to your function. For example, remove_digits(c("INFO 201", "CSE 142"))
remove_digits(c("INFO 201", "CSE 142"))
remove_digits <- function(x) {
x <- c(x)
remove <- gsub(pattern = "\\d","",str)
remove
}
# Demonstrate that your approach is successful by passing a vector of courses
# to your function. For example, remove_digits(c("INFO 201", "CSE 142"))
remove_digits(c("INFO 201", "CSE 142"))
remove_digits <- function(c(x)) {
remove <- gsub(pattern = "\\d","",x)
remove
}
# Demonstrate that your approach is successful by passing a vector of courses
# to your function. For example, remove_digits(c("INFO 201", "CSE 142"))
remove_digits(c("INFO 201", "CSE 142"))
remove_digits <- function(c(x)) {
remove <- gsub(pattern = "\\d","",x)
return(remove)
}
# Demonstrate that your approach is successful by passing a vector of courses
# to your function. For example, remove_digits(c("INFO 201", "CSE 142"))
remove_digits(c("INFO 201", "CSE 142"))
remove_digits <- function(x) {
remove <- gsub(pattern = "\\d","",x)
return(remove)
}
# Demonstrate that your approach is successful by passing a vector of courses
# to your function. For example, remove_digits(c("INFO 201", "CSE 142"))
remove_digits(c("INFO 201", "CSE 142"))
multiples_of_8 <- multiplies_of_4[multiplies_of_4 %% 8 == 0]
make_introduction <- function(name, age) {
intro <- paste0("Hello, my name is ", name, ", and I'm ", age, " years old.")
}
# Create a variable `my_intro` by passing your variables `my_name` and `my_age`
# into your `make_introduction()` function
my_intro <- make_introduction(my_name, my_age)
multiplies_of_4 <- seq(4,400,4)
multiples_of_8 <- multiplies_of_4[multiplies_of_4 %% 8 == 0]
summarize_vector <- function(x) {
summary <- list(mean = mean(x), median = median(x), length = length(x))
return (summary)
}
lintr:::addin_lint()
lintr:::addin_lint()
lintr:::addin_lint()
lintr:::addin_lint()
lintr:::addin_lint()
lintr:::addin_lint()
lintr:::addin_lint()
make_introduction <- function(name, age) {
intro <- paste0("Hello, my name is ", name, ", and I'm ", age, " years old.")
return(intro)
}
make_introduction <- function(name, age) {
intro <- paste0("Hello, my name is ", name, ", and I'm ", age, " years old.")
return(intro)
}
lintr:::addin_lint()
styler:::style_active_file()
styler:::style_active_pkg()
styler:::style_active_file()
styler:::style_selection()
styler:::style_selection()
lintr:::addin_lint()
lintr:::addin_lint()
lintr:::addin_lint()
# Create a vector `movies` that contains the names of six movies you like
movies <- c(
"Harry Potter", "Up", "Aladdins",
"The Lord of the rings", "Roma",
"Forrest Gump"
)
lintr:::addin_lint()
lintr:::addin_lint()
styler:::set_style_transformers()
more_zs <- has_more_zs("ASDFzZ", "ASDF")
more_zs <- has_more_zs("ASDFzZ", "ASDF")
lintr:::addin_lint()
lintr:::addin_lint()
setwd("~/Desktop/info201/R-lecture-03")
wd_path <- "~/desktop/info201/R-lecture-03"
setwd(wd_path)
# Note: A helpful command is getwd() for getting the working directory
# call: getwd()
#----------------------------------------------
# Step #2: Read the CSV file with read.csv()
#----------------------------------------------
people_df  <- read.csv(people.csv)
#----------------------------------------------
# Step #3: Use the head() function to check the data
#----------------------------------------------
head(people_df)
#----------------------------------------------
# Step #4: Find out other informationa bout data frame
# Use functions dim(),colnames(), and rownames()
#----------------------------------------------
dim(people_df)
colnames(people_df)
rownames(people_df)
# filename: example1.R
#----------------------------------------------
# Task: Edit the following commands to load
# the CSV people file into R
#----------------------------------------------
#----------------------------------------------
# Step #1: Set your working directory
# Path will be something like:
#    "~/Documents/<XXX>/R-lecture-03"
# You can also use:
#   RStudio Menu: Session: Set Working Directory: Choose Directory
#----------------------------------------------
wd_path <- "~/desktop/info201/R-lecture-03"
setwd(wd_path)
# Note: A helpful command is getwd() for getting the working directory
# call: getwd()
#----------------------------------------------
# Step #2: Read the CSV file with read.csv()
#----------------------------------------------
people_df  <- read.csv(people.csv)
#----------------------------------------------
# Step #3: Use the head() function to check the data
#----------------------------------------------
head(people_df)
#----------------------------------------------
# Step #4: Find out other informationa bout data frame
# Use functions dim(),colnames(), and rownames()
#----------------------------------------------
dim <- dim(people_df)
colname <- colnames(people_df)
rownames <- rownames(people_df)
wd_path <- "~/desktop/info201/R-lecture-03"
setwd(wd_path)
# Note: A helpful command is getwd() for getting the working directory
# call: getwd()
#----------------------------------------------
# Step #2: Read the CSV file with read.csv()
#----------------------------------------------
people_df  <- read.csv("./Data/people.csv",
header = TRUE,
stringsAsFactors = FALSE)
#----------------------------------------------
# Step #3: Use the head() function to check the data
#----------------------------------------------
head(people_df)
#----------------------------------------------
# Step #4: Find out other informationa bout data frame
# Use functions dim(),colnames(), and rownames()
#----------------------------------------------
dim <- dim(people_df)
colname <- colnames(people_df)
rownames <- rownames(people_df)
dim <- dim(people_df)
colname <- colnames(people_df)
rownames <- rownames(people_df)
View(people_df)
View(people_df)
install.packages(carData)
wd_path <- "~/desktop/info201/R-lecture-03/"
setwd(wd_path)
data <- carData::Florida
install.packages(carData)
install.packages(carData)
Florida
wd_path <- "~/desktop/info201/R-lecture-03/"
setwd(wd_path)
data <- carData::Florida
install.packages(carData)
Florida
wd_path <- "~/desktop/info201/R-lecture-03/"
setwd(wd_path)
data <- carData::Florida
install.packages(carData)
datas <- Florida
names <- read.csv("./Data/female_names.csv",
header = TRUE,
stringsAsFactors = FALSE)
# Create a data frame `names_2013` that contains only the rows for the year 2013
names_2013 <- data.frame(year = '2013',)
# variable called `names`. Remember to NOT treat the strings as factors!
names <- read.csv("./Data/female_names.csv",
header = TRUE,
stringsAsFactors = FALSE)
# Create a data frame `names_2013` that contains only the rows for the year 2013
names_2013 <- names[year = '2013',]
names <- read.csv("./Data/female_names.csv",
header = TRUE,
stringsAsFactors = FALSE)
# Create a data frame `names_2013` that contains only the rows for the year 2013
names_2013 <- names$year = '2013'
names <- read.csv("./Data/female_names.csv",
header = TRUE,
stringsAsFactors = FALSE)
# Create a data frame `names_2013` that contains only the rows for the year 2013
names_2013 <- names$year = '2013'
print(names_2013)
names <- read.csv("./Data/female_names.csv",
header = TRUE,
stringsAsFactors = FALSE)
# Create a data frame `names_2013` that contains only the rows for the year 2013
names_2013 <- names['2013',]
print(names_2013)
# What was the most p
names <- read.csv("./Data/female_names.csv",
header = TRUE,
stringsAsFactors = FALSE)
# Create a data frame `names_2013` that contains only the rows for the year 2013
names_2013 <- names['2013',]
print(names_2013)
# What was the most p
names <- read.csv("./Data/female_names.csv",
header = TRUE,
stringsAsFactors = FALSE)
# Create a data frame `names_2013` that contains only the rows for the year 2013
names_2013 <- names['2013',]
print(names_2013)
# What was the most p
# Read in the female baby names data file found in the `data` folder into a
# variable called `names`. Remember to NOT treat the strings as factors!
names <- read.csv("./Data/female_names.csv",
header = TRUE,
stringsAsFactors = FALSE)
# Create a data frame `names_2013` that contains only the rows for the year 2013
names_2013 <- names['2013',]
print(names_2013)
names <- read.csv("./Data/female_names.csv",
header = TRUE,
stringsAsFactors = FALSE)
# Create a data frame `names_2013` that contains only the rows for the year 2013
names_2013 <- names['2013', ]
print(names_2013)
# variable called `names`. Remember to NOT treat the strings as factors!
names <- read.csv("./Data/female_names.csv",
header = TRUE,
stringsAsFactors = FALSE)
# Exercise 5: large data sets: Baby Name Popularity Over Time
# Read in the female baby names data file found in the `data` folder into a
# variable called `names`. Remember to NOT treat the strings as factors!
names <- read.csv("./data/female_names.csv",
header = TRUE,
stringsAsFactors = FALSE)
# Exercise 5: large data sets: Baby Name Popularity Over Time
# Read in the female baby names data file found in the `data` folder into a
# variable called `names`. Remember to NOT treat the strings as factors!
names <- read.csv("./data/female_names.csv",
header = TRUE,
stringsAsFactors = FALSE)
names <- read.csv("./data/female_names.csv",
header = TRUE,
stringsAsFactors = FALSE)
# Create a data frame `names_2013` that contains only the rows for the year 2013
names_2013 <- names[name$2013, ]
print(names_2013)
# variable called `names`. Remember to NOT treat the strings as factors!
names <- read.csv("./data/female_names.csv",
header = TRUE,
stringsAsFactors = FALSE)
install.packages(carData)
carData
install.packages("carData")
carData::Florida
wd_path <- "~/desktop/info201/R-lecture-03/"
setwd(wd_path)
data <- carData::Florida
install.packages(carData)
nader <- ncol(Florida$NADER[Florida$GORE > Florida$BUSH])
wd_path <- "~/desktop/info201/R-lecture-03/"
setwd(wd_path)
data <- carData::Florida
install.packages(carData)
library(carData)
nader <- ncol(Florida$NADER[Florida$GORE > Florida$BUSH])
wd_path <- "~/desktop/info201/R-lecture-03/"
setwd(wd_path)
data <- carData::Florida
install.packages(carData)
library(carData)
nader <- ncol(Florida$NADER[Florida$GORE > Florida$BUSH])
View(Florida)
nader <- ncol(Florida$NADER[Florida$GORE > Florida$BUSH])
nader <- ncol(Florida$NADER[Florida$GORE > Florida$BUSH])
nader <- ncol(Florida$NADER[Florida$GORE > Florida$BUSH])
wd_path <- "~/desktop/info201/R-lecture-03/"
setwd(wd_path)
data <- carData::Florida
install.packages(carData)
library(carData)
nader <- ncol(Florida$NADER[Florida$GORE > Florida$BUSH])
print(nader)
wd_path <- "~/desktop/info201/R-lecture-03/"
setwd(wd_path)
data <- carData::Florida
install.packages(carData)
library(carData)
nader <- ncol(Florida$NADER[,Florida$GORE > Florida$BUSH])
print(nader)
wd_path <- "~/desktop/info201/R-lecture-03/"
setwd(wd_path)
data <- carData::Florida
install.packages(carData)
library(carData)
nader <- ncol(Florida$NADER[,Florida$GORE > Florida$BUSH])
print(nader)
wd_path <- "~/desktop/info201/R-lecture-03/"
setwd(wd_path)
data <- carData::Florida
install.packages(carData)
library(carData)
nader <- ncol(Florida$NADER[, Florida$GORE > Florida$BUSH])
print(nader)
wd_path <- "~/desktop/info201/R-lecture-03/"
setwd(wd_path)
data <- carData::Florida
install.packages(carData)
library(carData)
nader <- nrow(sum.(Florida$NADER)[, Florida$GORE > Florida$BUSH])
print(nader)
wd_path <- "~/desktop/info201/R-lecture-03/"
setwd(wd_path)
data <- carData::Florida
install.packages(carData)
library(carData)
nader <- nrow(SUM.(Florida$NADER)[, Florida$GORE > Florida$BUSH])
print(nader)
wd_path <- "~/desktop/info201/R-lecture-03/"
setwd(wd_path)
data <- carData::Florida
install.packages(carData)
library(carData)
nader <- nrow(Florida$NADER[, Florida$GORE > Florida$BUSH])
return(nader)
wd_path <- "~/desktop/info201/R-lecture-03/"
setwd(wd_path)
data <- carData::Florida
install.packages(carData)
library(carData)
nader <- nrow(Florida$NADER[, Florida$GORE > Florida$BUSH])
wd_path <- "~/desktop/info201/R-lecture-03/"
setwd(wd_path)
data <- carData::Florida
install.packages(carData)
library(carData)
nader <- nrow(Florida[, Florida$GORE > Florida$BUSH])
nader <- nrow(sum(Florida)[4, Florida$GORE > Florida$BUSH])
wd_path <- "~/desktop/info201/R-lecture-03/"
setwd(wd_path)
data <- carData::Florida
install.packages(carData)
library(carData)
nader <- sum(Florida)[4, Florida$GORE > Florida$BUSH]
wd_path <- "~/desktop/info201/R-lecture-03/"
setwd(wd_path)
data <- carData::Florida
install.packages(carData)
library(carData)
nader <- sum(Florida)[Florida$GORE > Florida$BUSH,4]
wd_path <- "~/desktop/info201/R-lecture-03/"
setwd(wd_path)
data <- carData::Florida
install.packages(carData)
library(carData)
nader <- sum(Florida)[Florida$GORE > Florida$BUSH, 4]
wd_path <- "~/desktop/info201/R-lecture-03/"
setwd(wd_path)
data <- carData::Florida
install.packages(carData)
library(carData)
sum(Florida)[Florida$GORE > Florida$BUSH, 4]
wd_path <- "~/desktop/info201/R-lecture-03/"
setwd(wd_path)
data <- carData::Florida
install.packages(carData)
library(carData)
sum(Florida)[Florida$GORE > Florida$BUSH, NADAR]
wd_path <- "~/desktop/info201/R-lecture-03/"
setwd(wd_path)
data <- carData::Florida
install.packages(carData)
library(carData)
sum(Florida)[Florida$GORE > Florida$BUSH, 4]
wd_path <- "~/desktop/info201/R-lecture-03/"
setwd(wd_path)
data <- carData::Florida
install.packages(carData)
library(carData)
sum(Florida[Florida$GORE > Florida$BUSH, 4])
wd_path <- "~/desktop/info201/R-lecture-03/"
setwd(wd_path)
data <- carData::Florida
install.packages(carData)
library(carData)
sum(Florida[Florida$GORE > Florida$BUSH, 4])
nrow(Florida[,Florida$GORE > Florida$BUSH])
wd_path <- "~/desktop/info201/R-lecture-03/"
setwd(wd_path)
data <- carData::Florida
install.packages(carData)
library(carData)
sum(Florida[Florida$GORE > Florida$BUSH, 4])
nrow(Florida[Florida$GORE > Florida$BUSH,])
wd_path <- "~/desktop/info201/R-lecture-03/"
setwd(wd_path)
data <- carData::Florida
install.packages(carData)
library(carData)
sum(Florida[Florida$GORE > Florida$BUSH, 4])
nrow(Florida[Florida$GORE > Florida$BUSH,])
rownames(Florida[Florida$Total == max(Florida$Total),])
View("female_names.csv")
View(female_names.csv)
names <- read.csv("data/female_names.csv",
stringsAsFactors = FALSE)
# Create a data frame `names_2013` that contains only the rows for the year 2013
names_2013 <- names[names$year == 2013, ]
names <- read.csv("data/female_names.csv",
stringsAsFactors = FALSE)
names <- read.csv("data/female_names.csv",
stringsAsFactors = FALSE)
names <- read.csv("./data/female_names.csv",
stringsAsFactors = FALSE)
