# filename: example2.R
# Task: Given a temperature in Fahrenheit, compute the temperature in Celcius
# A numeric variable holding temperature in Fahrenheit
temp_in_F <- 32
# Using standard formula, compute temperature in Fahrenheit
temp_in_C <- (32-temp_in_F) * 5/9
# Print the result
print(temp_in_C)
# filename: example2.R
# Task: Given a temperature in Fahrenheit, compute the temperature in Celcius
# A numeric variable holding temperature in Fahrenheit
temp_in_F <- 100
# Using standard formula, compute temperature in Fahrenheit
temp_in_C <- (32-temp_in_F) * 5/9
# Print the result
print(temp_in_C)
# filename: example2.R
# Task: Given a temperature in Fahrenheit, compute the temperature in Celcius
# A numeric variable holding temperature in Fahrenheit
temp_in_F <- 100
# Using standard formula, compute temperature in Fahrenheit
temp_in_C <- (temp_in_F-32) * 5/9
# Print the result
print(temp_in_C)
# filename: example2.R
# Task: Given a temperature in Fahrenheit, compute the temperature in Celcius
# A numeric variable holding temperature in Fahrenheit
temp_in_F <- -42
# Using standard formula, compute temperature in Fahrenheit
temp_in_C <- (temp_in_F-32) * 5/9
# Print the result
print(temp_in_C)
# filename: example2.R
# Task: Given a temperature in Fahrenheit, compute the temperature in Celcius
# A numeric variable holding temperature in Fahrenheit
temp_in_F <- -42.5
# Using standard formula, compute temperature in Fahrenheit
temp_in_C <- (temp_in_F-32) * 5/9
# Print the result
print(temp_in_C)
# filename: example2.R
# Task: Given a temperature in Fahrenheit, compute the temperature in Celcius
# A numeric variable holding temperature in Fahrenheit
temp_in_F <- -42.6
# Using standard formula, compute temperature in Fahrenheit
temp_in_C <- (temp_in_F-32) * 5/9
# Print the result
print(temp_in_C)
# filename: example2.R
# Task: Given a temperature in Fahrenheit, compute the temperature in Celcius
# A numeric variable holding temperature in Fahrenheit
temp_in_F <- -41.5
# Using standard formula, compute temperature in Fahrenheit
temp_in_C <- (temp_in_F-32) * 5/9
# Print the result
print(temp_in_C)
# filename: example2.R
# Task: Given a temperature in Fahrenheit, compute the temperature in Celcius
# A numeric variable holding temperature in Fahrenheit
temp_in_F <- -41.9
# Using standard formula, compute temperature in Fahrenheit
temp_in_C <- (temp_in_F-32) * 5/9
# Print the result
print(temp_in_C)
# filename: example2.R
# Task: Given a temperature in Fahrenheit, compute the temperature in Celcius
# A numeric variable holding temperature in Fahrenheit
temp_in_F <- -42.0
# Using standard formula, compute temperature in Fahrenheit
temp_in_C <- (temp_in_F-32) * 5/9
# Print the result
print(temp_in_C)
t = 1-
;
t = 1
s = 2
X = t > s
print (X)
test = (string1 == "Toronto" && temp > 40)
print(test)
string1 = "Toronto"
string2 = "Seattle"
temp1 = -20
temp2 = 45
test = (string1 == "Toronto" && temp > 40)
print(test)
string1 = "Toronto"
string2 = "Seattle"
temp1 = -20
temp2 = 45
test = (string1 == "Toronto" && temp > 40)
print(test)
string1 = "Toronto"
string2 = "Seattle"
temp1 = -20
temp2 = 45
test = (string1 == "Toronto" && temp1 > 40)
print(test)
string1 = "Toronto"
string2 = "Seattle"
temp1 = -20
temp2 = 45
test = (string1 == "Toronto" & temp1 > 40)
print(test)
string1 = "Toronto"
string2 = "Seattle"
temp1 = -20
temp2 = 45
test = (string1 == "Toronto" & temp1 > 40)
print(test)
# Parentheses show order of operations
test = ((string1 == "Toronto") & (temp1 > 40))
print(test)
test = (temp1 < 30 & (string2 = "Toronto" | string2 == "Seattle"))
print(test)
string1 = "Toronto"
string2 = "Seattle"
temp1 = -20
temp2 = 45
test = (string1 == "Toronto" & temp1 > 40)
print(test)
# Parentheses show order of operations
test = ((string1 == "Toronto") & (temp1 > 40))
print(test)
test = (temp1 < 30 & (string1 == "Toronto" | string2 == "Seattle"))
print(test)
#filename: example6.R
string1 = "Toronto"
string2 = "Seattle"
temp1 = -20
temp2 = 45
# Example 1: Logical operator & (AND)
if (temp1 < 0) {
print("It is cold.")
} else {
print("It is not cold.")
}
print(temp1)
#filename: example6.R
string1 = "Toronto"
string2 = "Seattle"
temp1 = -20
temp2 = 45
# Example 1: Logical operator & (AND)
if (temp1 < 0) {
print("It is cold.")
} else {
print("It is not cold.")
}
print(temp1)
# filename: example7.R
# Task: Given a temperature in Celcius, compute the temperature in Fahrenheit
CelciusToFarenheit <- function(temp_in_C) {
temp_in_F <- temp_in_C * 9/5 + 32
return (temp_in_F)
}
temp1 <- CelciusToFarenheit(0)
temp2 <- CelciusToFarenheit(10)
temp3 <- CelciusToFarenheit(-42)
temp4 <- CelciusToFarenheit(42)
print(temp1)
print(temp2)
print(temp3)
print(temp4)
- A block of code
```{r eval=FALSE}
{
temp_in_F <- temp_in_C * 9/5 + 32
}
```
- Return the result
```{r eval=FALSE}
return (temp_in_F)
```
Functions
====================================
source: ./R/example1.R
# filename: example7.R
# This function converts Celcius to Farenheit
CelciusToFarenheit <- function(temp_in_C) {
temp_in_F <- temp_in_C * 9/5 + 32
return (temp_in_F)
}
# This function converts Farenheit to Celcius
FarenheitToCelcius <- function(temp_in_F) {
# Fill in function body
return (xxx)
}
# Compute Farenheit temperatures for 0, 10, -42 and 42 Celcius
temp1 <- CelciusToFarenheit(0)
temp2 <- CelciusToFarenheit(10)
temp3 <- CelciusToFarenheit(-42)
temp4 <- CelciusToFarenheit(42)
# Print results
print(temp1)
print(temp2)
print(temp3)
print(temp4)
# This function converts Celcius to Farenheit
CelciusToFarenheit <- function(temp_in_C) {
temp_in_F <- temp_in_C * 9/5 + 32
return (temp_in_F)
}
# This function converts Farenheit to Celcius
FarenheitToCelcius <- function() {
# Fill in function body
return ()
}
# Compute Farenheit temperatures for 0, 10, -42 and 42 Celcius
temp1 <- CelciusToFarenheit(0)
temp2 <- CelciusToFarenheit(10)
temp3 <- CelciusToFarenheit(-42)
temp4 <- CelciusToFarenheit(42)
plot(cars)
# This function converts Celcius to Farenheit
FarenheitToCelcius <- function(temp_in_F) {
temp_in_C <- (temp_in_F - 32) *  5/9
return (temp_in_C)
}
print(FarenheitToCelcius(32))
print(FarenheitToCelcius(100))
print(FarenheitToCelcius(-42))
# Celcius to Fahrenheit
c <- 20
f <- c * 9/5 + 32
print(f)
else if ( temp1 > 5 & temp1 < 0) {
print ("It is cold")
}
# Example 1
if (temp1 < -10) {
print("It is really cold.")
} else if (temp1 >= -10 & temp1 < -5) {
print("It is fairly cold.")
}
#filename: example6.R
# Today's temperatures in Celcius
string1 <- "Toronto"
string2 <- "Seattle"
temp1 <- -20
temp2 <- 33
# Example 1
if (temp1 < 0) {
print("It is cold.")
} else {
print("It is not cold.")
}
print(temp1)
# Example 1
if (temp1 < -10) {
print("It is really cold.")
} else if (temp1 >= -10 & temp1 < -5) {
print("It is fairly cold.")
}
else if ( temp1 > 5 & temp1 < 0) {
print ("It is cold")
}
else if (temp == 0) {
print ("It is freezing")
}
else if (temp1 > 30) {
print("It is hot")
} else  {
print("It is neither cold nor hot")
}
print(temp1)
#filename: example6.R
# Today's temperatures in Celcius
string1 <- "Toronto"
string2 <- "Seattle"
temp1 <- -20
temp2 <- 33
# Example 1
if (temp1 < 0) {
print("It is cold.")
} else {
print("It is not cold.")
}
print(temp1)
# Example 1
if (temp1 < -10) {
print("It is really cold.")
} else if (temp1 >= -10 & temp1 < -5) {
print("It is fairly cold.")
} else if (temp1 > 5 & temp1 < 0) {
print ("It is cold")
} else if (temp == 0) {
print ("It is freezing")
} else if (temp1 > 30) {
print("It is hot")
} else  {
print("It is neither cold nor hot")
}
print(temp1)
#filename: example6.R
# Today's temperatures in Celcius
string1 <- "Toronto"
string2 <- "Seattle"
temp1 <- -5
temp2 <- 33
# Example 1
if (temp1 < 0) {
print("It is cold.")
} else {
print("It is not cold.")
}
print(temp1)
# Example 1
if (temp1 < -10) {
print("It is really cold.")
} else if (temp1 >= -10 & temp1 < -5) {
print("It is fairly cold.")
} else if (temp1 > -5 & temp1 < 0) {
print ("It is cold")
} else if (temp1 == 0) {
print ("It is freezing")
} else if (temp1 > 30) {
print("It is hot")
} else  {
print("It is neither cold nor hot")
}
print(temp1)
install.packages("stringr")
library("stringr")
v <- (10.31, 10.56, 11.11)
print(round(v,1))
v <- c(10.31, 10.56, 11.11)
print(round(v,1))
v <- c(10.31, 10.56, 11.11)
print(round(v,0))
citation()
f <- function(a,b) {
print("ab")
}
print(f("a","b"))
f <- function(a,b) {
}
print(f("a","b"))
f <- function(a,b) {
return(NULL)
}
print(f("a","b"))
source('~/Documents/__INFO-201/05slides/Slides/R-lecture-02/R/example1.R', echo=TRUE)
lintr:::addin_lint()
styler:::set_style_transformers()
styler:::style_selection()
styler:::style_selection()
lintr:::addin_lint()
lintr:::addin_lint()
lintr:::addin_lint()
styler:::style_selection()
lintr:::addin_lint()
styler:::style_selection()
lintr:::addin_lint()
lintr:::addin_lint()
lintr:::addin_lint()
lintr:::addin_lint()
source('~/Documents/__INFO-201/05slides/Slides/R-lecture-02/R/example1.R', echo=TRUE)
source('~/Documents/__INFO-201/05slides/Slides/R-lecture-02/R/example1.R', echo=TRUE)
lintr:::addin_lint()
lintr:::addin_lint()
styler:::style_selection()
styler:::style_active_file()
lintr:::addin_lint()
lintr:::addin_lint()
lintr:::addin_lint()
lintr:::addin_lint()
lintr:::addin_lint()
lintr:::addin_lint()
lintr:::addin_lint()
lintr:::addin_lint()
detach("package:lintr", unload = TRUE)
detach("package:styler", unload = TRUE)
library(styler)
detach("package:styler", unload = TRUE)
string1 = "Toronto"
string2 = "Seattle"
temp1 = -20
temp2 = 45
# Logical operator & (AND)
test = (string1 == "Toronto" & temp1 >= 40)
&
string1 = "Toronto"
string2 = "Seattle"
temp1 = -20
temp2 = 45
# Logical operator & (AND)
test = (string1 == "Toronto" & temp1 >= 40)
print(test)
string1 = "Toronto"
string2 = "Seattle"
temp1 = -20
temp2 = 45
# Logical operator & (AND)
test = (string1 == "Toronto" & temp1 >= 40)
print(test)
# Parentheses show order of operationsn - can help with readability
test = ((string1 == "Toronto") & (temp1 > 40))
print(test)
# Parentheses show order of operationsn - can help with readability
test = ((string1 == "Toronto") & (temp1 > 40))
print(test)
#Example 2: Logical operator & (AND) and | (OR)
# Example2a
test = (temp1 < 30 & (string1 == "Toronto" | string2 == "Seattle"))
print(test)
compute <- function(n1, n2, n3) {
# Set the default case
t <- 0
# Check for condition #1
if (n1 > 0 & n2 > 0 & n3 > 0) {
t <- n1 *  n3
}
# check for condition #2
if (n1 < 0 | n2 < 0 | n3 < 0) {
t <- sum(n1,n2,n3)
}
return (t)
}
# All parameters are greater than 1
print(compute(1,2,3))
print(compute(1,2,3))
print(compute(1,2,3))
print(compute(1,2,3))
print(compute(1,2,3))
compute <- function(n1, n2, n3) {
# Set the default case
t <- 0
# Check for condition #1
if (n1 > 0 & n2 > 0 & n3 > 0) {
t <- n1 *  n3
}
# check for condition #2
if (n1 < 0 | n2 < 0 | n3 < 0) {
t <- sum(n1,n2,n3)
}
return (t)
}
# All parameters are greater than 1
print(compute(1,2,3))
# One parameter is less than 1
print(compute(-1,0,100))
source('~/Documents/__INFO-201/05slides/Slides/R-lecture-02/R/example4_answer.R')
install.packages("stringr")
library("stringr")
str <- " once upon a time there was a large horse by a tree "
source('~/Documents/__INFO-201/05slides/Slides/R-lecture-02/R/example0.R')
lintr:::addin_lint()
lintr:::addin_lint()
lintr:::addin_lint()
lintr:::addin_lint()
lintr:::addin_lint()
lintr:::addin_lint()
lintr:::addin_lint()
lintr:::addin_lint()
lintr:::addin_lint()
styler:::style_selection()
styler:::style_selection()
styler:::style_selection()
f <- function() {
return (1)
}
f2 <- function() {
t <- 1
}
f3 <- function() {
t <-1
t
}
print(f())
print(f2())
print(f3())
lintr:::addin_lint()
lintr:::addin_lint()
lintr:::addin_lint()
lintr:::addin_lint()
lintr:::addin_lint()
help.start()
t <- temp1["loc"]
print(typeof(t))
source('~/Documents/__INFO-201/05slides/Slides/R-lecture-02/R/example6.R')
t <- temp1["loc"]
print(typeof(t))
# A single bracket returns a list
t <- temp1["loc"]
print(typeof(t))
# A double brack returns a string
t <- temp1[["loc"]]
print(typeof(t))
setwd("~/Documents/__INFO-201/05slides/2019 New/R-Slides/R-lecture-03/Data")
df <- read.csv("./natural-amenity-simplified.csv",header=TRUE, stringsAsFactors=FALSE)
setwd("~/Documents/__INFO-201/05slides/2019/R-Slides/R-lecture-03/Data")
df <- read.csv("./natural-amenity-simplified.csv",header=TRUE, stringsAsFactors=FALSE)
View(df)
print(df[,df$BCODE=2])
print(df[,df$BCODE==2])
df[df$BCODE==2,]
df[df$STATE="WA" & TEMPJAN > 35,]
df[df$STATE=="WA" & TEMPJAN > 35,]
df[df$STATE=="WA" & df.TEMPJAN > 35,]
df[df$STATE=="WA" & df$TEMPJAN > 35,]
df[,df$RANK]
v <- [,df$RANK]
v <- df[,df$RANK]
length(v)
mean(v)
head(v)
v <- df[,"RANK"]
head(v)
mean(v)
mean(df$RANK)
mean(c(df$LSCOD,df$RANK))
