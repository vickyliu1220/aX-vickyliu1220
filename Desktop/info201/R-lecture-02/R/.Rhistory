print("It is not cold.")
}
print(temp1)
# Example 1
if (temp1 < -10) {
print("It is really cold.")
} else if (temp1 >= -10 & temp1 < -5) {
print("It is fairly cold.")
} else if (temp1 > -5 & temp1 < 0) {
print ("It is cold")
} else if (temp1 == 0) {
print ("It is freezing")
} else if (temp1 > 30) {
print("It is hot")
} else  {
print("It is neither cold nor hot")
}
print(temp1)
install.packages("stringr")
library("stringr")
v <- (10.31, 10.56, 11.11)
print(round(v,1))
v <- c(10.31, 10.56, 11.11)
print(round(v,1))
v <- c(10.31, 10.56, 11.11)
print(round(v,0))
citation()
f <- function(a,b) {
print("ab")
}
print(f("a","b"))
f <- function(a,b) {
}
print(f("a","b"))
f <- function(a,b) {
return(NULL)
}
print(f("a","b"))
source('~/Documents/__INFO-201/05slides/Slides/R-lecture-02/R/example1.R', echo=TRUE)
lintr:::addin_lint()
styler:::set_style_transformers()
styler:::style_selection()
styler:::style_selection()
lintr:::addin_lint()
lintr:::addin_lint()
lintr:::addin_lint()
styler:::style_selection()
lintr:::addin_lint()
styler:::style_selection()
lintr:::addin_lint()
lintr:::addin_lint()
lintr:::addin_lint()
lintr:::addin_lint()
source('~/Documents/__INFO-201/05slides/Slides/R-lecture-02/R/example1.R', echo=TRUE)
source('~/Documents/__INFO-201/05slides/Slides/R-lecture-02/R/example1.R', echo=TRUE)
lintr:::addin_lint()
lintr:::addin_lint()
styler:::style_selection()
styler:::style_active_file()
lintr:::addin_lint()
lintr:::addin_lint()
lintr:::addin_lint()
lintr:::addin_lint()
lintr:::addin_lint()
lintr:::addin_lint()
lintr:::addin_lint()
lintr:::addin_lint()
detach("package:lintr", unload = TRUE)
detach("package:styler", unload = TRUE)
library(styler)
detach("package:styler", unload = TRUE)
lintr:::addin_lint()
lintr:::addin_lint()
library(lintr)
library(styler)
setwd("~/Documents/__INFO-201/05slides/R-files")
lint("analysis.R")
lint("Analysis.R")
setwd("~/Documents/__INFO-201/05slides/Slides/R-lecture-02/R")
lint("Analysis.R")
style_file("analysis.R")
lint("analysis.R")
lint("analysis.R")
lint("analysis.R")
style_file("analysis.R")
lintr:::addin_lint()
lint("analysis.R")
style_file("analysis.R")
setwd("~/Documents/__INFO-201/05slides/Slides/R-lecture-02/R")
lint("analyis.R")
lint("analysis.R")
lintr:::addin_lint()
lintr:::addin_lint()
style_file("analysis.R")
style_file("analysis.R")
style_file("analysis.R")
styler:::style_selection()
styler:::style_active_file()
str_starts("once","o")
# filename: example0.R
install.packages("stringr")
library("stringr")
# The stringr package provides functions for manipulating strings
# See examples:
str <- " once upon a time there was a large horse by a tree  "
print(str)
t <- str_tirm(str)
print(t)
print(str_to_upper(str))
print(str_to_title(str))
print(str_trim(str))
install.packages("stringr")
# filename: example0.R
install.packages("stringr")
library("stringr")
# The stringr package provides functions for manipulating strings
# See examples:
str <- " once upon a time there was a large horse by a tree  "
print(str)
t <- str_tirm(str)
print(t)
print(str_to_upper(str))
print(str_to_title(str))
print(str_trim(str))
install.packages("stringr")
library("stringr")
str <- " once upon a time there was a large horse by a tree  "
print(str)
t <- str_tirm(str)
print(str_to_title(str))
source('~/Documents/__INFO-201/05slides/Slides/R-lecture-02/R/example0.R')
str_start("once","o")
string# filename: example0.R
#install.packages("stringr")
library("stringr")
# The stringr package provides functions for manipulating strings
# See examples:
str <- " once upon a time there was a large horse by a tree  "
print(str)
t <- str_trim(str)
print(t)
print(str_to_upper(str))
print(str_to_title(str))
pring(str_starts(str," o"))
string# filename: example0.R
#install.packages("stringr")
library("stringr")
# The stringr package provides functions for manipulating strings
# See examples:
str <- " once upon a time there was a large horse by a tree  "
print(str)
t <- str_trim(str)
print(t)
print(str_to_upper(str))
print(str_to_title(str))
ing# filename: example0.R
#install.packages("stringr")
library("stringr")
# The stringr package provides functions for manipulating strings
# See examples:
str <- " once upon a time there was a large horse by a tree  "
print(str)
t <- str_trim(str)
print(t)
print(str_to_upper(str))
print(str_to_title(str))
print(str_starts(str," o"))
string# filename: example0.R
#install.packages("stringr")
library("stringr")
# The stringr package provides functions for manipulating strings
# See examples:
str <- " once upon a time there was a large horse by a tree"
print(str)
t <- str_trim(str)
print(t)
print(str_to_upper(str))
print(str_to_title(str))
print(str_starts(str," o"))
pring(str_ends(str,"tree"))
string# filename: example0.R
#install.packages("stringr")
library("stringr")
# The stringr package provides functions for manipulating strings
# See examples:
str <- " once upon a time there was a large horse by a tree"
print(str)
t <- str_trim(str)
print(t)
print(str_to_upper(str))
print(str_to_title(str))
print(str_starts(str," o"))
print(str_ends(str,"tree"))
source('~/Documents/__INFO-201/05slides/Slides/R-lecture-02/R/example0.R')
library("stringr")
str <- " once upon a time there was a large horse by a tree "
print(str)
# Take away whitespace at beginning and end of string
t <- str_trim(str)
print(t)
print(str_to_upper(str))                  # Put all letters in UPPER case
print(str_to_title(str))                  # Put string in "title" case
print(str_starts(str,"o"))                # Does string begin with "o"?
print(str_starts(str_trim(str),"o"))      # Does string begin with "o" after trimming?
print(str_ends(str,"tree "))              # Does string end with "tree "?
string1 = "Toronto"
string2 = "Seattle"
temp1 = -20
temp2 = 45
# Logical operator & (AND)
test = (string1 == "Toronto" & temp1 >= 40)
print(test)
# Parentheses show order of operationsn - can help with readability
test = ((string1 == "Toronto") & (temp1 > 40))
print(test)
#Logical operator & (AND) and | (OR)
test = (temp1 < 30 & (string1 == "Toronto" | string2 == "Seattle"))
print(test)
string1 = "Toronto"
string2 = "Seattle"
temp1 = -20
temp2 = 45
# Logical operator & (AND)
test = (string1 == "Toronto" & temp1 >= 40)
print(test)
# Parentheses show order of operationsn - can help with readability
test = ((string1 == "Toronto") & (temp1 > 40))
print(test)
#Logical operator & (AND) and | (OR)
test = (temp1 < 30 & (string1 == "Toronto" | string2 == "Seattle"))
print(test)
test = ((temp1 < 30) & (string1 == "Toronto")) |
((temp1 < 30) & string2 == "Seattle"))
print(test)
print(test)
print(test)
print(test)
print(test)
print(test)
string1 = "Toronto"
string2 = "Seattle"
temp1 = -20
temp2 = 45
# Logical operator & (AND)
test = (string1 == "Toronto" & temp1 >= 40)
print(test)
# Parentheses show order of operationsn - can help with readability
test = ((string1 == "Toronto") & (temp1 > 40))
print(test)
#Example 2: Logical operator & (AND) and | (OR)
# Example2a
test = (temp1 < 30 & (string1 == "Toronto" | string2 == "Seattle"))
print(test)
# Example 2b
test =    ((temp1 < 30) & (string1 == "Toronto")) |
((temp1 < 30) & (string2 == "Seattle"))
print(test)
styler:::set_style_transformers()
compute <- function(n1, n2, n3) {
# Set the default case
t <- 0
# Check for condition #1
if (n1 > 0 & n2 > 0 & n3 > 0) {
t <- n1 * n2 * n3
}
# check for condition #2
if (n1 < 0 | n2 < 0 | n3 < 0) {
t <- sum(n1,n2,n3)
}
return(t)
}
compute <- function(n1, n2, n3) {
# Set the default case
t <- 0
# Check for condition #1
if (n1 > 0 & n2 > 0 & n3 > 0) {
t <- n1 * n2 * n3
}
# check for condition #2
if (n1 < 0 | n2 < 0 | n3 < 0) {
t <- sum(n1,n2,n3)
}
return (t)
}
# All parameters are greater than 1
print(compute(1,2,3))
# One parameter is less than 1
print(compute(-1,0,100))
print(compute(0,-1,100))
print(compute(100,0,-1))
# All parameters are zero
print(compute(0,0,0))
cities <- c("Seattle", "Toronto", "New York", "Portland")
temps <- c(50,86.6,95,55)
lenght(cities)
len(cities)
#filename: example5.R
cities <- c("Seattle", "Toronto", "New York", "Portland")
temps <- c(50,86.6,95,55)
length(cities)
cities <- c("Seattle", "Toronto", "New York", "Portland")
temps <- c(50,86.6,95,55)
# How many elements are in the vector?
l <-length(cities)
print(l)
# Apply statistical functions to a numeric vector
avg = mean(temps)
sum = sum(temps)
max = max(temps)
min = min(temps)
print(sum)
print(avg)
print(min)
print(max)
cities <- c("Seattle", "Toronto", "New York", "Portland")
temps <- c(50,86.6,95,55)
# How many elements are in the vector?
l <-length(cities)
print(l)
cities_UPPER_case <- toupper(cities)
print(cities_UPPER_case)
# Apply statistical functions to a numeric vector
avg = mean(temps)
sum = sum(temps)
max = max(temps)
min = min(temps)
print(sum)
print(avg)
print(min)
print(max)
temps + (-32 * 5/9)
cities <- c("Vancouver", "Seattle", "Toronto", "New York", "Portland")
temps <- c(32,50,86.6,100,55)
# How many elements are in the vector?
l <-length(cities)
print(l)
cities_UPPER_case <- toupper(cities)
print(cities_UPPER_case)
# Apply statistical functions to a numeric vector
avg = mean(temps)
sum = sum(temps)
max = max(temps)
min = min(temps)
print(sum)
print(avg)
print(min)
print(max)
temps + (-32 * 5 / 9)
temps - 32
(temps -32 ) * 5 /9
temps_in_C <- (temps - 32) * 5 /9
print(temps_in_C)
temps_in_C <- round((temps - 32) * 5 /9,1)
print(temps_in_C)
cities <- c("Vancouver", "Seattle", "Toronto", "New York", "Portland")
temps <- c(temp,50,86.6,100,55)
# How many elements are in the vector?
l <-length(cities)
print(l)
cities_UPPER_case <- toupper(cities)
print(cities_UPPER_case)
# Apply statistical functions to a numeric vector
avg = mean(temps)
sum = sum(temps)
max = max(temps)
min = min(temps)
print(sum)
print(avg)
print(min)
print(max)
# Convert temps in F to temps in C
temps_in_C <- round((temps - 32) * 5 /9,1)
# Subtract 32 from each number in temps
t1 <- temps - 32
# Multiple each nuber by 5
t2 <- t1 * 5
# Divide each number by 9
t3 <- t2 / 9
# Round off each number to one decimal place
t4 <- round(t3,1)
#filename: example5.R
cities <- c("Vancouver", "Seattle", "Toronto", "New York", "Portland")
temps <- c(temp,50,86.6,100,55)
# How many elements are in the vector?
l <-length(cities)
print(l)
cities_UPPER_case <- toupper(cities)
print(cities_UPPER_case)
# Apply statistical functions to a numeric vector
avg = mean(temps)
sum = sum(temps)
max = max(temps)
min = min(temps)
print(sum)
print(avg)
print(min)
print(max)
# Convert temps in F to temps in C
temps_in_C <- round((temps - 32) * 5 /9,1)
# Subtract 32 from each number in temps
t1 <- temps - 32
# Multiple each nuber by 5
t2 <- t1 * 5
# Divide each number by 9
t3 <- t2 / 9
# Round off each number to one decimal place
t4 <- round(t3,1)
print(t1)
print(t2)
print(t3)
print(t3)
temps_2018 <- c(32,50,86.6,100,55)
temps_2019 <- c(31,55,90,76,60)
diff <- temps_2018 - temps_2019
print(diff)
# Round off each number to one decimal place
t4 <- round(t3,1)
temps_2018 <- c(32,50,86.6,100,55)
temps_2019 <- c(31,55,90,76,60)
diff <- abs(temps_2018 - temps_2019)
print(diff)
temps_2018 <- c(32,50,86.6,100,55)
temps_2019 <- c(32,55,90,76,55)
# Compute the absolute difference between the two vectors (elements pairs)
temp_diff <- abs(temps_2018 - temps_2019)
print (temp_diff)
# Apply a relational operator to each element pair
temp_comp <- temps_2019 > temps_2018
print(temp_comp)
temps_2018 <- c(32,50,86.6,100,55)
temps_2019 <- c(32,55,90,76,55)
# Compute the absolute difference between the two vectors (elements pairs)
temp_diff <- abs(temps_2018 - temps_2019)
print (temp_diff)
# Apply a relational operator to each element pair
temp_comp <- temps_2019 > temps_2018
print(temp_comp)
temp_comp <- temps_2019 = temps_2018
print(temp_comp)
temps_2018 <- c(32,50,86.6,100,55)
temps_2019 <- c(32,55,90,76,55)
# Compute the absolute difference between the two vectors (elements pairs)
temp_diff <- abs(temps_2018 - temps_2019)
print (temp_diff)
# Apply a relational operator to each element pair
temp_comp <- temps_2019 > temps_2018
print(temp_comp)
temp_comp <- temps_2019 == temps_2018
print(temp_comp)
lintr:::addin_lint()
styler:::style_active_file()
styler:::style_selection()
styler:::style_selection()
styler:::style_selection()
#----------------------------------------------
# Creating a list
#----------------------------------------------
temp1 <- list(loc="Seattle", temp=55, validated=TRUE)
temp2 <- list(loc="Toronto", temp=35, validated=FALSE)
#----------------------------------------------
# Adding a list to a vector
#----------------------------------------------
temps <- c(temp1,temp2)
#----------------------------------------------
# Appendng a list to a vector
#----------------------------------------------
temps <- append(list(loc="Portland", temp=60, validated=TRUE))
#----------------------------------------------
# Creating a list
#----------------------------------------------
temp1 <- list(loc="Seattle", temp=55, validated=TRUE)
temp2 <- list(loc="Toronto", temp=35, validated=FALSE)
#----------------------------------------------
# Adding a list to a vector
#----------------------------------------------
temps <- c(temp1,temp2)
#----------------------------------------------
# Appendng a list to a vector
#----------------------------------------------
t <- list(loc="Portland", temp=60, validated=TRUE)
temps <- append()
temp1 <- list(loc="Seattle", temp=55, validated=TRUE)
temp2 <- list(loc="Toronto", temp=35, validated=FALSE)
#----------------------------------------------
# Adding a list to a vector
#----------------------------------------------
temps <- c(temp1,temp2)
#----------------------------------------------
# Appendng a list to a vector
#----------------------------------------------
t <- list(loc="Portland", temp=60, validated=TRUE)
temps <- append(t)
#----------------------------------------------
# Creating a list
#----------------------------------------------
temp1 <- list(loc="Seattle", temp=55, validated=TRUE)
temp2 <- list(loc="Toronto", temp=35, validated=FALSE)
#----------------------------------------------
# Adding a list to a vector
#----------------------------------------------
temps <- c(temp1,temp2)
#----------------------------------------------
# Appendng a list to a vector
#----------------------------------------------
t <- list(loc="Portland", temp=60, validated=TRUE)
append(temps,t)
temp["loc"]
temps["loc"]
temps[["loc"]]
sappy(llist (p1 = 10, p2 = 100), sqrt)
sapply(llist (p1 = 10, p2 = 100), sqrt)
sapply(list (p1 = 10, p2 = 100), sqrt)
